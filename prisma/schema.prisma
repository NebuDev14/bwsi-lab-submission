// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  challenges    UserChallenge[]
  verified      Boolean         @default(false)
  userType      UserType        @default(STUDENT)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserChallenge {
  userId      String
  challengeId String
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  challenge   Challenge       @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  status      ChallengeStatus

  @@id([userId, challengeId])
}

model Challenge {
  id          String            @id @default(cuid())
  name        String
  desc        String
  flag        String            @unique
  url         String
  users       UserChallenge[]   
  submissions SubmitChallenge[]
  createdAt   DateTime          @default(now())
}

model SubmitChallenge {
  id String @id @default(cuid())

  Challenge   Challenge? @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  challengeId String?
}

enum ChallengeStatus {
  COMPLETED
  UNCOMPLETE
}

enum UserType {
  STUDENT
  TEACHER
}
